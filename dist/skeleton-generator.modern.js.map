{"version":3,"file":"skeleton-generator.modern.js","sources":["../templates.js","../index.js"],"sourcesContent":["export const trim = string => props => string(props)\n  .replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n\nexport const animation = `\n  <linearGradient id=\"fill\">\n    <stop\n      offset=\"0.599964\"\n      stop-color=\"#f3f3f3\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"-2; -2; 1\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n    <stop\n      offset=\"1.59996\"\n      stop-color=\"#ecebeb\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"-1; -1; 2\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n    <stop\n      offset=\"2.59996\"\n      stop-color=\"#f3f3f3\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"0; 0; 3\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n  </linearGradient>\n`\n\nconst rect = ({ x, y, width, height }) => `\n  <rect rx=\"3\" ry=\"3\" x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" />\n`\nconst use = ({ id, x, y }) => `\n  <use href=\"#${id}\" x=\"${x}\" y=\"${y}\" />\n`\nconst path = ({ path, id }) => `\n  <path id=\"${id}\" d=\"${path}\" />\n`\n\nconst renderRefs = (groups) =>\n  groups.reduce(\n    (acc, group) => acc + group.positions.map(\n      (position) => use({ ...group, ...position })\n    ).join('')\n  , '')\n\nexport const template = trim(({\n  width,\n  height,\n  singles,\n  groups\n}) => `\n<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" preserveAspectRatio=\"none\">\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" clip-path=\"url(#clip)\" style='fill: url(\"#fill\");'></rect>\n  <defs>\n    ${groups.map(path).join('')}\n    <clipPath id=\"clip\">\n      ${renderRefs(groups)}\n      ${singles.map(rect).join('')}\n    </clipPath>\n    ${animation}\n  <defs>\n</svg>\n`)\n","import toPath from 'element-to-path';\nimport { template } from './templates';\nimport { nanoid } from 'nanoid';\n\nconst SELECTORS = {\n  container: '[data-draw=\\'container\\']',\n  group: '[data-draw=\\'group\\']',\n  text: '[data-draw=\\'text\\']',\n  rect: '[data-draw=\\'rect\\']',\n  border: '[data-draw=\\'border\\']',\n}\n\nconst defaultGroupIdentifier = (node) => node.dataset['draw-id'];\n\nconst defaultConfig = {\n  container: SELECTORS.container,\n  group: SELECTORS.group,\n  text: SELECTORS.text,\n  rect: SELECTORS.rect,\n  border: SELECTORS.border,\n  identifyGroup: defaultGroupIdentifier\n}\n\nconst isHidden = node => !(node.offsetWidth || node.offsetHeight || node.getClientRects().length);\n\nconst getPosition = (node, containerRect) => {\n  const nodeRect = node.getBoundingClientRect();\n  return {\n    left: nodeRect.left - containerRect.left,\n    top: nodeRect.top - containerRect.top,\n    width: nodeRect.width,\n    height: nodeRect.height,\n  }\n}\n\nconst getElementHeight = (style) => {\n  const boxSizing = style.getPropertyValue(\"box-sizing\");\n  const height = parseInt(style.getPropertyValue(\"height\"));\n  if (boxSizing !== 'border-box') return height;\n  const paddingTop = parseInt(style.getPropertyValue(\"padding-top\"));\n  const paddingBottom = parseInt(style.getPropertyValue(\"padding-bottom\"));\n  const borderTop = parseInt(style.getPropertyValue(\"border-top-width\"));\n  const borderBottom = parseInt(style.getPropertyValue(\"border-bottom-width\"));\n  return height - paddingTop - paddingBottom - borderTop - borderBottom;\n}\n\nconst getNodeStyles = (node) => window.getComputedStyle(node, null);\n\nconst countLines = (node) => {\n  const style = getNodeStyles(node);\n  const _fontSize = parseInt(style.getPropertyValue(\"font-size\"));\n  const _lineHeight = parseInt(style.getPropertyValue(\"line-height\"));\n  const lineHeight = isNaN(_lineHeight) ? _fontSize : _lineHeight\n  const height = getElementHeight(style);\n  return {\n    lines: (height < lineHeight * 2) ? 1 : Math.ceil(height / lineHeight),\n    lineHeight: lineHeight\n  };\n}\n\nconst getRange = (node) => {\n  const range = document.createRange();\n  range.selectNode(node);\n  return range.getClientRects();\n}\n\nconst elements = {\n  text(node, containerRect) {\n    if (isHidden(node)) return;\n    const position = getPosition(node, containerRect);\n    const { lines, lineHeight } = countLines(node);\n\n    if (lines === 1) {\n      const rangeOffset = getRange(node);\n      position.left = rangeOffset[1].x - 20;\n      position.width = rangeOffset[1].width;\n    }\n\n    const { left, top, width, height } = position;\n\n    return [...Array(lines).keys()].map((index) => ({\n      x: left,\n      y: !index ? top : top + (index * lineHeight) + (index * 5),\n      height: height < lineHeight ? height : lineHeight,\n      width,\n    }))\n  },\n\n  rect(node, containerRect) {\n    const position = getPosition(node, containerRect);\n    const style = getNodeStyles(node);\n    const paddingLeft = parseInt(style.getPropertyValue(\"padding-left\"));\n    const paddingRight = parseInt(style.getPropertyValue(\"padding-right\"));\n    const { left, top, width, height } = position;\n\n    return [{\n      x: left + paddingLeft,\n      y: top,\n      width: width + paddingRight,\n      height\n    }]\n  },\n}\n\nconst walkThroughNodes = (type, nodes, parentRect) =>\n  Array.from(nodes)\n    .map((node) => elements[type](node, parentRect))\n    .filter(i => !!i)\n    .reduce((acc, item) => [...acc, ...item] ,[]);\n\nconst getGroup = (groupNodes, config) => {\n  const fistNode = groupNodes[0];\n  const groupRect = fistNode.getBoundingClientRect();\n  const textNodes = fistNode.querySelectorAll(config.text);\n  const rectNodes = fistNode.querySelectorAll(config.rect);\n\n  const groupElements = [\n    ...walkThroughNodes('text', textNodes, groupRect),\n    ...walkThroughNodes('rect', rectNodes, groupRect)\n  ]\n\n  const path = groupElements\n    .map((attributes) => toPath({ type: 'element', name: 'rect', attributes }))\n    .join(' ')\n\n  const positions = groupNodes.map((node) => {\n    const { x, y } = node.getBoundingClientRect();\n    return { x, y };\n  });\n\n  return {\n    positions,\n    path,\n    id: nanoid()\n  }\n}\n\nconst getPaths = (type, selector, container, groups) => {\n  const parentRect = container.getBoundingClientRect();\n  const groupsArray = Array.from(groups);\n  const nodes = Array\n    .from(container.querySelectorAll(selector))\n    .filter((node) =>\n      !groups.find(group => Array.from(group.querySelectorAll(selector)).includes(node))\n    );\n  \n  return walkThroughNodes(type, nodes, parentRect);\n}\n\nconst getMainDrawing = (container, config) => {\n  const { width, height } = container.getBoundingClientRect();\n  const groupNodes = Array.from(container.querySelectorAll(config.group));\n  const groupsHash = groupNodes\n    .reduce((acc, node) => {\n      const id = config.identifyGroup(node);\n      if (!acc[id]) return { ...acc, [id]: [node] };\n      return { ...acc, [id]: [...acc[id], node ] };\n    }, {});\n  \n  const groups = Object.keys(groupsHash).map(id => getGroup(groupsHash[id], config));\n  const singles = [\n    ...getPaths('text', config.text, container, groupNodes),\n    ...getPaths('rect', config.rect, container, groupNodes)\n  ]\n\n  return template({ width, height, singles, groups })\n}\n\nexport default (_config) => {\n  const config = { ...defaultConfig, ..._config };\n  if (!document) return console.error('Function available only in browser environment!');\n\n  const container = document.querySelectorAll(config.container);\n  if (!container) return console.error('FNo containers was found on the page');\n\n  const res = Array\n    .from(container)\n    .map(c => getMainDrawing(c, config));\n\n  return res;\n}\n"],"names":["rect","x","y","width","height","path","id","template","string","singles","groups","map","join","reduce","acc","group","positions","position","use","renderRefs","props","replace","defaultConfig","container","text","border","identifyGroup","node","dataset","getPosition","containerRect","nodeRect","getBoundingClientRect","left","top","getNodeStyles","window","getComputedStyle","elements","offsetWidth","offsetHeight","getClientRects","length","isHidden","lines","lineHeight","style","_fontSize","parseInt","getPropertyValue","_lineHeight","isNaN","boxSizing","getElementHeight","Math","ceil","countLines","rangeOffset","range","document","createRange","selectNode","getRange","Array","keys","index","paddingLeft","paddingRight","walkThroughNodes","type","nodes","parentRect","from","filter","i","item","getPaths","selector","querySelectorAll","find","includes","_config","config","console","error","c","groupNodes","groupsHash","[object Object]","Object","fistNode","groupRect","textNodes","rectNodes","attributes","toPath","name","nanoid","getGroup","getMainDrawing"],"mappings":"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"}