{"version":3,"file":"skeleton-generator.js","sources":["../templates.js","../index.js"],"sourcesContent":["export const trim = string => props => string(props)\n  .replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n\nexport const animation = `\n  <linearGradient id=\"fill\">\n    <stop\n      offset=\"0.599964\"\n      stop-color=\"#f3f3f3\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"-2; -2; 1\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n    <stop\n      offset=\"1.59996\"\n      stop-color=\"#ecebeb\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"-1; -1; 2\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n    <stop\n      offset=\"2.59996\"\n      stop-color=\"#f3f3f3\"\n      stop-opacity=\"1\"\n    >\n      <animate\n        attributeName=\"offset\"\n        values=\"0; 0; 3\"\n        keyTimes=\"0; 0.25; 1\"\n        dur=\"2s\"\n        repeatCount=\"indefinite\"\n      ></animate>\n    </stop>\n  </linearGradient>\n`\n\nconst rect = ({ x, y, width, height }) => `\n  <rect rx=\"3\" ry=\"3\" x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" />\n`\nconst use = ({ id, x, y }) => `\n  <use href=\"#${id}\" x=\"${x}\" y=\"${y}\" />\n`\nconst path = ({ path, id }) => `\n  <path id=\"${id}\" d=\"${path}\" />\n`\n\nconst renderRefs = (groups) =>\n  groups.reduce(\n    (acc, group) => acc + group.positions.map(\n      (position) => use({ ...group, ...position })\n    ).join('')\n  , '')\n\nexport const template = trim(({\n  width,\n  height,\n  singles,\n  groups\n}) => `\n<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" preserveAspectRatio=\"none\">\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" clip-path=\"url(#clip)\" style='fill: url(\"#fill\");'></rect>\n  <defs>\n    ${groups.map(path).join('')}\n    <clipPath id=\"clip\">\n      ${renderRefs(groups)}\n      ${singles.map(rect).join('')}\n    </clipPath>\n    ${animation}\n  <defs>\n</svg>\n`)\n","import toPath from 'element-to-path';\nimport { template } from './templates';\nimport { nanoid } from 'nanoid';\n\nconst SELECTORS = {\n  container: '[data-draw=\\'container\\']',\n  group: '[data-draw=\\'group\\']',\n  text: '[data-draw=\\'text\\']',\n  rect: '[data-draw=\\'rect\\']',\n  border: '[data-draw=\\'border\\']',\n}\n\nconst defaultGroupIdentifier = (node) => node.dataset['draw-id'];\n\nconst defaultConfig = {\n  container: SELECTORS.container,\n  group: SELECTORS.group,\n  text: SELECTORS.text,\n  rect: SELECTORS.rect,\n  border: SELECTORS.border,\n  identifyGroup: defaultGroupIdentifier\n}\n\nconst isHidden = node => !(node.offsetWidth || node.offsetHeight || node.getClientRects().length);\n\nconst getPosition = (node, containerRect) => {\n  const nodeRect = node.getBoundingClientRect();\n  return {\n    left: nodeRect.left - containerRect.left,\n    top: nodeRect.top - containerRect.top,\n    width: nodeRect.width,\n    height: nodeRect.height,\n  }\n}\n\nconst getElementHeight = (style) => {\n  const boxSizing = style.getPropertyValue(\"box-sizing\");\n  const height = parseInt(style.getPropertyValue(\"height\"));\n  if (boxSizing !== 'border-box') return height;\n  const paddingTop = parseInt(style.getPropertyValue(\"padding-top\"));\n  const paddingBottom = parseInt(style.getPropertyValue(\"padding-bottom\"));\n  const borderTop = parseInt(style.getPropertyValue(\"border-top-width\"));\n  const borderBottom = parseInt(style.getPropertyValue(\"border-bottom-width\"));\n  return height - paddingTop - paddingBottom - borderTop - borderBottom;\n}\n\nconst getNodeStyles = (node) => window.getComputedStyle(node, null);\n\nconst countLines = (node) => {\n  const style = getNodeStyles(node);\n  const _fontSize = parseInt(style.getPropertyValue(\"font-size\"));\n  const _lineHeight = parseInt(style.getPropertyValue(\"line-height\"));\n  const lineHeight = isNaN(_lineHeight) ? _fontSize : _lineHeight\n  const height = getElementHeight(style);\n  return {\n    lines: (height < lineHeight * 2) ? 1 : Math.ceil(height / lineHeight),\n    lineHeight: lineHeight\n  };\n}\n\nconst getRange = (node) => {\n  const range = document.createRange();\n  range.selectNode(node);\n  return range.getClientRects();\n}\n\nconst elements = {\n  text(node, containerRect) {\n    if (isHidden(node)) return;\n    const position = getPosition(node, containerRect);\n    const { lines, lineHeight } = countLines(node);\n\n    if (lines === 1) {\n      const rangeOffset = getRange(node);\n      position.left = rangeOffset[1].x - 20;\n      position.width = rangeOffset[1].width;\n    }\n\n    const { left, top, width, height } = position;\n\n    return [...Array(lines).keys()].map((index) => ({\n      x: left,\n      y: !index ? top : top + (index * lineHeight) + (index * 5),\n      height: height < lineHeight ? height : lineHeight,\n      width,\n    }))\n  },\n\n  rect(node, containerRect) {\n    const position = getPosition(node, containerRect);\n    const style = getNodeStyles(node);\n    const paddingLeft = parseInt(style.getPropertyValue(\"padding-left\"));\n    const paddingRight = parseInt(style.getPropertyValue(\"padding-right\"));\n    const { left, top, width, height } = position;\n\n    return [{\n      x: left + paddingLeft,\n      y: top,\n      width: width + paddingRight,\n      height\n    }]\n  },\n}\n\nconst walkThroughNodes = (type, nodes, parentRect) =>\n  Array.from(nodes)\n    .map((node) => elements[type](node, parentRect))\n    .filter(i => !!i)\n    .reduce((acc, item) => [...acc, ...item] ,[]);\n\nconst getGroup = (groupNodes, config) => {\n  const fistNode = groupNodes[0];\n  const groupRect = fistNode.getBoundingClientRect();\n  const textNodes = fistNode.querySelectorAll(config.text);\n  const rectNodes = fistNode.querySelectorAll(config.rect);\n\n  const groupElements = [\n    ...walkThroughNodes('text', textNodes, groupRect),\n    ...walkThroughNodes('rect', rectNodes, groupRect)\n  ]\n\n  const path = groupElements\n    .map((attributes) => toPath({ type: 'element', name: 'rect', attributes }))\n    .join(' ')\n\n  const positions = groupNodes.map((node) => {\n    const { x, y } = node.getBoundingClientRect();\n    return { x, y };\n  });\n\n  return {\n    positions,\n    path,\n    id: nanoid()\n  }\n}\n\nconst getPaths = (type, selector, container, groups) => {\n  const parentRect = container.getBoundingClientRect();\n  const groupsArray = Array.from(groups);\n  const nodes = Array\n    .from(container.querySelectorAll(selector))\n    .filter((node) =>\n      !groups.find(group => Array.from(group.querySelectorAll(selector)).includes(node))\n    );\n  \n  return walkThroughNodes(type, nodes, parentRect);\n}\n\nconst getMainDrawing = (container, config) => {\n  const { width, height } = container.getBoundingClientRect();\n  const groupNodes = Array.from(container.querySelectorAll(config.group));\n  const groupsHash = groupNodes\n    .reduce((acc, node) => {\n      const id = config.identifyGroup(node);\n      if (!acc[id]) return { ...acc, [id]: [node] };\n      return { ...acc, [id]: [...acc[id], node ] };\n    }, {});\n  \n  const groups = Object.keys(groupsHash).map(id => getGroup(groupsHash[id], config));\n  const singles = [\n    ...getPaths('text', config.text, container, groupNodes),\n    ...getPaths('rect', config.rect, container, groupNodes)\n  ]\n\n  return template({ width, height, singles, groups })\n}\n\nexport default (_config) => {\n  const config = { ...defaultConfig, ..._config };\n  if (!document) return console.error('Function available only in browser environment!');\n\n  const container = document.querySelectorAll(config.container);\n  if (!container) return console.error('FNo containers was found on the page');\n\n  const res = Array\n    .from(container)\n    .map(c => getMainDrawing(c, config));\n\n  return res;\n}\n"],"names":["string","rect","x","y","width","height","path","id","template","singles","groups","map","join","reduce","acc","group","positions","position","renderRefs","props","replace","defaultConfig","container","text","border","identifyGroup","node","dataset","getPosition","containerRect","nodeRect","getBoundingClientRect","left","top","getNodeStyles","window","getComputedStyle","elements","offsetWidth","offsetHeight","getClientRects","length","isHidden","style","_fontSize","parseInt","getPropertyValue","_lineHeight","lineHeight","isNaN","boxSizing","getElementHeight","lines","Math","ceil","countLines","rangeOffset","range","document","createRange","selectNode","getRange","Array","keys","index","paddingLeft","paddingRight","walkThroughNodes","type","nodes","parentRect","from","filter","i","item","getPaths","selector","querySelectorAll","find","includes","_config","config","console","error","c","groupNodes","groupsHash","Object","fistNode","groupRect","textNodes","rectNodes","attributes","toPath","name","nanoid","getGroup","getMainDrawing"],"mappings":"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"}